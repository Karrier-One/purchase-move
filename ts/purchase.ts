import { getFullnodeUrl, SuiClient } from "@mysten/sui.js/client";
import { TransactionBlock, TransactionObjectArgument } from "@mysten/sui.js/transactions"
import { fromB64 } from "@mysten/bcs";
import { Ed25519Keypair } from "@mysten/sui.js/keypairs/ed25519";
import * as fs from 'fs';
import dotenv from 'dotenv';
dotenv.config(); // This loads the environment variables from .env file

// you can find the raw private key in the file ~/.sui/sui_config/sui.keystore
// which is generated by the command `sui client new-address`
export const raw = fromB64(process.env.SUI_PRIVATE_KEY!); 
export const keypair = Ed25519Keypair.fromSecretKey(raw.slice(1));

const packageId = "0x9ee959f9b543aa883a48a9d1739ffbec2530602e7f594ebfa4a5c5c9b000a12b";
const adminCapId = "0xbacc0cc78c1480ea557f06c91427081cf6c6c1f0114cd5ea9ed406f75d5f35cf";
const itemStoreId = "0x53254d6cc8929538be1c046162e1dc810dea8d45f6f21cf270877e11975af44c";

async function purchase_sui() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();
        let coin = txb.splitCoins(txb.gas, [ 10_000_000 ]);
        
        txb.moveCall({
          target: `${packageId}::pay::sui`,
          arguments: [
            txb.pure(itemStoreId),
            coin,
            txb.pure.string('name'),
            txb.pure.string('system sui')
          ],
        });

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        console.log(JSON.stringify(tx));
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(created), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(resp), 'purchase_sui_log.txt');    
}

async function purchase_kone() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();
        let coin = txb.splitCoins('0x94093db3b446c667d77fa3710ed96ccdf501ce13677717fac7a8f427dbecb1ee', [ 15_000_000 ]);
        txb.moveCall({
            target: `${packageId}::pay::kone`,
            arguments: [
              txb.pure(itemStoreId),
              coin,
              txb.pure.string('fe2a075d-772e-4fd9-9bb7-56bf35d255ce'),
              txb.pure.string('system kone')
            ],
          });        

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        console.log(JSON.stringify(tx));
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'purchase_kone_log.txt');
        logToFile(JSON.stringify(created), 'purchase_kone_log.txt');
        logToFile(JSON.stringify(resp), 'purchase_kone_log.txt');    
}

async function purchase_nft() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();    
    txb.moveCall({
        target: `${packageId}::pay::knsVoucher`,
        arguments: [
          txb.object('0x4f14b72c12cf2a7d3981b3b434d60e19f91906d765753e86565cb37332ad878a'),
          txb.pure.string('name'),
          txb.pure.string('system nft')
        ],
      });         

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        console.log(JSON.stringify(tx));
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'purchase_nft_log.txt');
        logToFile(JSON.stringify(created), 'purchase_nft_log.txt');
        logToFile(JSON.stringify(resp), 'purchase_nft_log.txt');        
}

function logToFile(message : string, filename = 'transaction_log.txt') {
    console.log(message);
    const formattedMessage = `${new Date().toISOString()}: ${message}\n`;
    fs.appendFileSync(filename, formattedMessage);
}

//purchase_sui();
purchase_kone();
//purchase_nft();